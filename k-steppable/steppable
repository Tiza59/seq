#!/usr/bin/perl -w
use strict;
use re 'eval';

my($b, $k, $n) = @ARGV;

my $s = '0' x $n;
my $endb = $b - 1;
our($succeed, $fail) = (qr{}, qr{(?!)});
my $re = join '', '^(.+?)', map sprintf(
	'(.+?)(??{ ($%s lt $%s) ? $succeed : $fail })', $_ - 1, $_
), 2 .. $k;
our $good = qr{$re};

my($good_count, $bad_count) = (0, 0);
my $tail;
my $t0 = (times)[0];
while (1) {
	if ($s =~ $good) {
		$tail = $n - $+[0];
		substr($s, -$tail) = $endb x $tail if $tail;
	} else {
		++$bad_count;
	}
	last unless $s =~ s{([^$endb])([$endb]*)\z}{
		($1 + 1) . ('0' x length($2))
	}e;
}
$good_count = ($b ** $n) - $bad_count;
my $t1 = (times)[0];
printf "%s %s %s %s %s (%.2f)\n",
		$b, $k, $n, $good_count, $bad_count, $t1 - $t0;

__END__

How many of the b^n strings of length n, base b can be partitioned in at least
one way into k non-empty substrings such that the substrings appear in lexical
order?

10s timings:
% ( ulimit -t 10 ; perl -we 'my $result; for my $b (2..4) { K: for my $k (2..5) { for my $n ($k .. 16) { $result = `./steppable $b $k $n`; next K if $?; print $result }}}' )
