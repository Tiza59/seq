#!/opt/maths/bin/perl -w
use strict;
use Math::GMP;
use Math::Prime::Util qw{ is_prime next_prime divisors factor_exp };

use lib './glib';
use Constraint;
use ModFunc qw/ mod_combine quadvec gcd /;

sub MBI { return Math::GMP->new(@_) }

my($opt_D, $opt_f, $opt_b, $opt_ta, $opt_fact, $opt_ix) = (0) x 6;
my($opt_n, $opt_x, $opt_c, $opt_t, $opt_cp, $opt_cr)
        = (0, 0, 0, 100000, 0, 0);
my($opt_mm);
my($opt_ts, $opt_m, $opt_mq, $opt_dm, $opt_dmq) = ([], [], [], [], []);

while (@ARGV && $ARGV[0] =~ /^-/) {
    my $arg = shift @ARGV;
    last if $arg eq '--';
    ($opt_D = 1, next) if $arg eq '-D';
    ($opt_f = 1, next) if $arg eq '-f';
    ($opt_b = 1, next) if $arg eq '-b';
    ($opt_ta = 1, next) if $arg eq '-ta';
    ($opt_fact = 1, next) if $arg eq '-fact';
    ($opt_ix = 1, next) if $arg eq '-ix';
    Constraint->debug_more(), next if $arg eq '-d';
    ($opt_n = $arg || shift(@ARGV)), next if $arg =~ s{^-n}{};
    ($opt_x = $arg || shift(@ARGV)), next if $arg =~ s{^-x}{};
    ($opt_cp = $arg || shift(@ARGV)), next if $arg =~ s{^-cp}{};
    ($opt_cr = $arg || shift(@ARGV)), next if $arg =~ s{^-cr}{};
    ($opt_c = $arg || shift(@ARGV)), next if $arg =~ s{^-c}{};
    ($opt_ts = [ split /,/, $arg || shift(@ARGV) ]), next if $arg =~ s{^-ts}{};
    ($opt_t = $arg || shift(@ARGV)), next if $arg =~ s{^-t}{};
    ($opt_mm = $arg || shift(@ARGV)), next if $arg =~ s{^-mm}{};
    push(@$opt_mq, $arg || shift(@ARGV)), next if $arg =~ s{^-mq}{};
    push(@$opt_m, $arg || shift(@ARGV)), next if $arg =~ s{^-m}{};
    push(@$opt_dmq, $arg || shift(@ARGV)), next if $arg =~ s{^-dmq}{};
    push(@$opt_dm, $arg || shift(@ARGV)), next if $arg =~ s{^-dm}{};
    die "Unknown option '$arg'\n";
}

$| = 1;
my($n, $f) = map MBI($_), @ARGV;
$0 = "gt($n $f)";
$_ = ston($_) for ($opt_n, $opt_x);

my $zone = MBI(1);
my $tn = tau($n);
my $c = Constraint->new(
    'n' => $n,
    'f' => $f,
    'tell_count' => $opt_t,
    't0' => scalar times(),
    'min' => $opt_n,
    'max' => $opt_x,
    'check' => $opt_c,
    'min_potency' => $opt_cr,
    'tau' => $tn,
);

$c = apply($c) or exit 0;
$opt_ix or check_exceptions($c);
printf <<OUT, $c->elapsed(), 'rootseq', $n, $f, ntos($opt_n), ntos($opt_x), modfix(), $opt_c;
300 Init %.2f: trying %s() for (%s, %s) in [%s, %s], %schecks up to mod %s
OUT
mod_dump($c, $opt_dm) if @$opt_dm;

my $d = rootseq($c);
if ($d) {
    report_seq($n, $f, $d);
    printf <<OUT, $n, $f, $d, modfix(), $c->elapsed();
200 f(%s, %s) = %s %s (%.3fs)
OUT
} else {
    printf <<OUT, $n, $f, ntos($opt_x), modfix(), $c->elapsed();
500 f(%s, %s) > %s %s (%.3fs)
OUT
}
exit 0;

#
# If the order of p in n is k and p^{k+1} divides the diff, we must have
# g(n, f) = p^k g(n / p^k, f). If constraints force the diff to be so
# divisible, g(n) = p^k g(n / p^k) for the rest of the sequence, and there's
# no point recalculating them. (The -f flag forces the calculation.)
#
sub check_mult {
    my($c) = @_;
    my($mult, $mod_mult) = ($c->mult, $c->mod_mult);
    my $mf = [ factor_exp($mult) ];
    for (@$mf) {
        my($p, $k) = @$_;   # p^k is fixed by constraints
        next if $k < 2;
        next unless 0 == ($n % $p);
        my $pk = $p ** $k;
        next if 0 == ($n % $pk);
        next unless 0 == ($mod_mult % $pk);
        do { $pk /= $p } while 0 != ($n % $pk);
        my $nd = $n / $pk;
        printf <<OUT, $f, $pk, $nd, $pk;
201 Dependent - %s:%s f(%s) # fix %s
OUT
        exit 0;
    }
}

#
# For certain individual cases we have proven limits that we cannot easily
# encode generically here. Avoid wasting time attempting to discover those
# unless the user asks to ignore exceptions (-ix).
#
sub check_exceptions {
    my($c) = @_;
    for (
        [ 243, 4 ], # see Constraint::Fact
    ) {
        my($n, $f) = @$_;
        if ($c->n == $n && $c->f > $f) {
            printf <<OUT, $n, $f, $c->elapsed;
403 Error: f(%s) > %s known impossible by exception (%.2fs)
OUT
            exit 1;
        }
    }
}

sub mod_override {
    my($c, $override) = @_;
    my($mod, $op, $val) = m{ ^ (\d+) ([=!]) (\d+) \z }x
            or die "Invalid mod override '$_'";
    if ($op eq '=') {
        $c->require($mod, $val);
    } else {
        $c->suppress($mod, $val);
    }
}

sub modfix {
    return join ', ', grep length,
        (@$opt_m ? sprintf('mod(%s) ', join ', ', @$opt_m) : ''),
        (@$opt_mq ? sprintf('sqmod(%s) ', join ', ', @$opt_mq) : '');
}

sub mod_dump {
    my($c, $which, $s) = @_;
    my $legend = $s ? " [$s]" : '';
    for my $mod (@$which) {
        my $cm = $c->c($mod);
        my $vm = $cm->[2];  # bit vector of all disallowed values
        if ($c->debug < 1) {
            printf <<OUT, $legend, $mod, unpack "b$mod", $vm;
331 disallowed%s (mod %s) [%s]
OUT
        } else {
            printf <<OUT, $legend, $mod, join ', ', grep vec($vm, $_, 1), 0 .. $mod - 1;
332 disallowed%s (mod %s): %s
OUT
        }
    }
}

sub unpack_mm {
    my($mm) = @_;
    # Expect "mod1=val1,mod2=val2,...modn=valn/b1b2...bn"
    die "Could not parse '-mm$mm'\n" unless $mm =~ m{
        ^ (?: \d+ = \d+ ,)* \d+ = \d+ / [01]+ $
    }x;
    my($modlist, $bits) = split '/', $mm;
    my @modlist = split /,/, $modlist;
    die "Wrong number of bits specified in '-mm$mm'\n"
            unless @modlist == length $bits;
    push @$opt_m, @modlist;
    push @$opt_mq, map [
        $modlist[$_], substr($bits, $_, 1),
    ], 0 .. $#modlist;
}

sub apply {
    my $c = shift;
    my $tn = $c->tau;
    my $n = $c->n;

    # If we require the diff to be coprime with the elements, deal with that
    # first.
    if ($opt_b) {
        for my $p (map $_->[0], factor_exp($c->n)) {
            $c->suppress($p, 0);
        }
    }

    # Unpack $opt_mm into @$opt_m and @$opt_mq
    unpack_mm($opt_mm) if defined $opt_mm;

    # If options specify overriding modular constraints, apply those next.
    mod_override($c, $_) for @$opt_m;

    for my $m (2 .. $c->check) {
$c->debug && warn "apply $m\n";
        my $fm = [ factor_exp($m) ];
        next if $opt_cp && cp_skip($opt_cp, $n, $fm);

        #
        # If n is prime, the only thing we can usefully do is avoid primes
        #
        if ($tn == 2) {
            series($c, 0, $m, $m) if @$fm == 1 && $fm->[0][1] == 1;
            next;
        }

        #
        # If we know n+kd must not divide m (maybe only beyond some maximum
        # value for n+kd), use that to deny various values (mod m).
        #
        my $max = test_series($m, $tn);
        series($c, 0, $m, $max) if $max >= 0;

        #
        # n+kd == m (mod m rad(m)) is suppressible when tau(m) ~| tau(n)
        #
        # Alternatively, when tau(n) / tau(m) is odd, we can fix any other
        # factors to be quadratic residues.
        #
        test_m_rad_m($c, $m, $tn);
    }

    #
    # Now go through each k working out what factors are fixed; we can use
    # the info to decide the most efficient tester for each k, and may also
    # find opportunities for additional constraint optimizations.
    #
    $c->find_active;    # update mult, mod_mult
    my $fixpow;
    for my $k (1 .. $f - 1) {
        my($force, $tester) = find_fixed($c, $n, $tn, $k);
        next unless $force;
        if ($fixpow) {
            # FIXME: can we construct and solve a Pell equation here?
            printf "317 Ignoring secondary fix_power(%s)\n", join ', ', @$force;
            my($k1, $x1, $z1) = @$fixpow;
            my($k2, $x2, $z2) = @$force;
            if (($z1 & 1) == 0 && ($z2 & 1) == 0) {
                my $a = ($k2 * $x1) ** ($z1 >> 1);
                my $b = ($k1 * $x2) ** ($z2 >> 1);
                my $c = $n * ($k2 - $k1);
                my $g = gcd($a, gcd($b, $c));
                $_ /= $g for ($a, $b, $c);
                my $sign = '-';
                ($sign, $b) = ('+', -$b) if $b < 0;
                printf "317 satisfying Pell (%s x)^2 %s %s y^2 = %s\n",
                        $a, $sign, $a * $b, $a * $c;
            }
        } else {
            $fixpow = $force;
        }
        # TODO: generate and use $tester
    }

    if ($opt_fact) {
        $c = $c->fix_fact();
    } elsif ($fixpow) {
        my($k, $x, $z) = @$fixpow;
        print "311 Fixing power d = (${x}y^$z - n)/$k\n";
        mod_dump($c, $opt_dm, 'pre-fix');
        $c = $c->fix_power($k, $x, $z, $opt_mq);
        $opt_dm = $opt_dmq;
    } elsif (@$opt_mq) {
        die "-mq or -mm options invalid without fixing power";
    }

    return $c;
}

#
# disallow n+kd=v (mod m) for n+kd > max
#
sub series {
    my($c, $v, $m, $max) = @_;
    $max ||= 0;
    ($c->debug > 1) && warn "series ($v, $m, $max)\n";
    my $n = $c->n;
    for my $k (1 .. $c->f - 1) {
        my $g = gcd($k, $m);
        my($gv, $gvr) = ($v - $n)->bdiv($g);
        next if $gvr != 0;    # No constraint: this modval can't happen
        my $m2 = $m / $g;
        my $inv = ($k / $g)->bmodinv($m2);
        my $v2 = ($gv * $inv) % $m2;
        ($c->debug > 2) && warn "k=$k, g=$g, gv=$gv, gvr=$gvr, m2=$m2, inv=$inv, v2=$v2\n";
        $c->suppress($m2, $v2, int(($max - $n) / $k) + 1);
    }
    ($c->debug > 1) && warn "series ($v, $m, $max): applied\n";
}

#
# Given known constraints, determine all prime powers known to divide
# n+kd, and take advantage of that in two ways:
# - if the known factors leave the unknown factors required to be a
#   perfect square or higher power, we can apply the fix_power optimization
# - (TODO) generate a targeted tester that divides by the known factors,
#   and then uses either a fast is_prime or specific tau check
# Returns (fix_power, tester) where I<fix_power> is an arrayref of
# [ k, x, z ] suitable to pass as arguments to the fix_power method,
# and I<tester> is a subref or undef.
#
# FIXME: n=p^2q, k=p, d != 0 (mod p) fails to find fixed p^1; this stops
# us finding fixpow(5, 5, 2) for n=575, f=6, -m5!0.
#   my $gkn = gcd($k, $n);
#   my $knfix = gcd($gkn, $n / $gkn); # now what?
# I _think_ this is relevant only when p^k is fixed in n+kd for some k >= 1,
# while p^{k+1} is disallowed and divides n.
#
sub find_fixed {
    my($c, $n, $tn, $k) = @_;
    my $kmult = $c->mult * $k;
    my $kmod = ($n + $c->mod_mult * $k) % $kmult;
    my $float = gcd($kmult, $kmod);

    my $spare = $kmult / $float;
    my $fixp = gcd($spare, $float);

    # primes in $fixp will show up at a fixed power (at the level of $float)
    # and so contribute a fixed multiple to tau(n+kd); primes in $float
    # but not in $fixp will show up at the floating power or greater.
    my($fixed_tau, $fixed_mult) = ($zone, $zone);
    my $ffloat = [ grep {
        (($fixp % $_->[0]) == 0) ? do {
            # take the fixed power, splice out of the list of remaining
            # floating powers
            $fixed_tau *= $_->[1] + 1;
            $fixed_mult *= $_->[0] ** $_->[1];
            0;
        } : do {
            # floating power: keep it in the list
            1;
        }
    } factor_exp($float) ];

    my($tneed, $sanity_check) = $tn->bdiv($fixed_tau);
    unless ($sanity_check == 0) {
        print "502 Error: fixed $fixed_tau not available in tau $tn\n";
        exit 1;
    }
    if ($tneed == 1) {
        printf <<OUT, $n, $k, $c->elapsed;
404 Error: %s + %sd must be divisible by n (%.2fs)
OUT
        exit 1;
    }
    # now handle the rest of $float
    if ($tneed & 1) {
        # we can fix a square, and maybe more - highest fixable power is
        # gcd of { p_i - 1 } over primes p_i dividing $tneed
        my $z = $tneed - 1;
        $z = gcd($z, $_->[0] - 1) for factor_exp($tneed);
        return ([ $k, $fixed_mult, $z ], undef);
    }
    printf("601 TODO generate tester k=%s for tau=%s%s\n",
        $k, $tneed, @$ffloat ? sprintf(" and floating [%s]",
            join ', ', map $_->[1], @$ffloat
        ) : "",
    );
    return (undef, undef);
}

#
# n+kd == xp^y (mod p^{y+1}) is suppressible when y+1 ~| tau(n).
#
# More generally:
#    tau(m) ~| tau(n)  and  n+kd == m (mod m rad(m)) => tau(n+kd) != tau(n)
#
# However, given m = \prod p_i^a_i, if a) tau(m) > tau(n), or better:
#    a)  \not \exists k: tau(km) = tau(n)
# or:
#    b)  \exists i: tau(m / p_i^a_i) ~| tau(n)
# we will already have suppressed a superset of what this gives us.
#   
# Additionally, when tau(m) | tau(n) with tau(n) / tau(m) odd, then if
# n + kd == um (mod m rad m), gcd(u, rad m) = 1 we can suppress
# um (mod m rad m) unless u is a quadratic residue mod each prime p
# dividing m, and um (mod q m rad m) unless u is a quadratic residue mod q.
#
# We can go further when instead of q we take q^s: there are more non-residues
# mod q^s (but it means recalculating what m and rad(m) mean). For any
# q > 2, it is only useful to take q^s : gcd(pmr, q^{s+1}) = q^s since
# for an odd prime a coprime non-residue mod q^{s+1} is always a non-residue
# mod q^s. For q=2 we need a special case to cope eg with 3(mod 4).
#
sub test_m_rad_m {
    my($c, $pmr, $tn) = @_;
    my $debug = $c->debug;
    $debug > 1 && print "m rad m: try $pmr\n";
    my($p, $m, $r) = discern_rad($pmr) or do {
        $debug > 2 && print "m rad m: too many spares\n";
        return;
    };
    my $mf = [ factor_exp($m) ];
    my $tm = tau_factor($mf);

    my $rp = $r * $p;
    my($qm, $qr, $qrp) = ($m, $r, $rp);
    my $quad_series = sub {
        my($mod) = @_;
        my $vec = quadvec($mod);
        for my $u (1 .. $qrp - 1) {
            next if gcd($u, $qr) > 1;
            next if vec($vec, $u % $mod, 1);
            $debug > 2 && print "m rad m: series $u * $qm, $pmr\n";
            series($c, $u * $qm, $pmr, 0);
        }
    };

    if ($p > 1) {
        $quad_series->($p) if divides_oddly($tn, $tm);
        # all remaining tests require p==1
        return;
    }

    $quad_series->($r) if divides_oddly($tn, $tm);

    if ($mf->[0][0] == 2) {
        # p=2 uniquely introduce new non-residues at higher powers; eg
        # 3 is a non-residue (mod 4).
        my $pp2 = $mf->[0][1];
        my $tm2 = $tm / ($pp2 + 1) * $pp2;
        if (divides_oddly($tn, $tm2)) {
            my $p = $mf->[0][0];
            $qm = $m / $p;
            $qrp = $rp * $p;
            my $pp = $p ** ($pp2 + 1);
            # we need to allow 2 mod 8, but not 4 mod 8
            $qr = $r;    # not $qr = $r / $p
            $quad_series->($p ** ($pp2 + 1));
        }
    }

# I think this is entirely wrong, and correcting it would make it a useless
# copy of a previous test.
#   {
#       for my $j (0 .. $#$mf) {
#           my $pp = $mf->[$j][1] + 1;
#           if (divides_oddly($tn, $tm / $pp)) {
#               my $p = $mf->[$j][0];
#               $qm = $m / $p;
#               $qr = $r / $p;
#               $qrp = $rp * $p;
#               $quad_series->($p ** $pp);
#           }
#       }
#   }

    # case a (coarse version)
    return if $tm > $tn;

    # main requirement
    return if ($tn % $tm) == 0;

    for my $i (0 .. $#$mf) {
        my $tm_i = $tm / ($mf->[$i][1] + 1);
        # case b
        return if ($tn % $tm_i) != 0;
    }

    for my $u (1 .. $r - 1) {
        next if gcd($u, $r) > 1;
        $c->debug && print "m rad m: suppress $m * $u mod $pmr\n";
        series($c, $m * $u, $pmr, 0);
    }
}

sub test_series {
    my($m, $tn) = @_;
    my $fm = [ factor_exp($m) ];
    my $tm = tau_factor($fm);
    my $max = -1;

    #
    # If tau(m) >= tau(n) we can limit the options (mod m).
    #
    if ($tm > $tn) {
        return 0;
    } elsif ($tm == $tn) {
        $max = $m;
    }

    #
    # Let m=\prod{p_i^a_i}, m_2=\prod{p_i^b_i} where b_i is least k >= a_i
    # such that b_i + 1 divides tau(n). Then if tau(m_2) >= tau(n) we can
    # limit the options (mod m) for n+kd > m_2.
    # 
    my $fm2 = [ map [ $_->[0], first_divisor($tn, $_->[1] + 1) - 1 ], @$fm ];
    my $m2 = unfactor_exp($fm2);
    my $tm2 = tau_factor($fm2);
    if ($m2 > $m) {
        if ($tm2 > $tn) {
            return 0;
        } elsif ($tm2 == $tn) {
            $max = $m2 unless $max >= 0 && $max < $m2;
        }
    }

    #
    # Let m_3=\prod{p_i^c_i}, c^i>=b_i. Valid solutions require selecting
    # k_j, m_{3j} such that tau(k_j m_{3j})=tau(n). If k_j=1 for all j,
    # we can limit the options (mod m) for n+kd > max(m_{3j}).
    #
    if (gcd($tm2, $tn) < $tm2) {
        my $maxm3 = 0;
        my $good = 1;
        my $iter = iter_factor($tn);
        while (my $tn_factors = $iter->()) {
            next if @$tn_factors < @$fm;
            my $fm3 = [ map [ $fm->[$_][0], $tn_factors->[$_] - 1 ], 0 .. $#$fm ];
            next if grep $fm3->[$_][1] < $fm2->[$_][1], 0 .. $#$fm;
            $good = 0, last if @$tn_factors > @$fm;
            my $m3 = unfactor_exp($fm3);
            $maxm3 = $m3 if $maxm3 < $m3;
        }
        $max = $maxm3 if $good && !($max >= 0 && $max < $maxm3);
    }
    return $max;
}

#
# Given integer s, returns (p, m, rad(m)) such that s = p m rad(m), and
# p is prime or 1. If no such split is possible (because more than one
# prime divides s with a multiplicity of one), returns nothing.
#
sub discern_rad {
    my($s) = @_;
    my $p = $zone;
    my $r = $zone;
    for (factor_exp($s)) {
        my($sp, $spp) = @$_;
        if ($spp == 1) {
            if ($p > 1) {
                return;
            } else {
                $p *= $sp;
            }
        } else {
            $r *= $sp;
        }
    }
    return +($p, $s / $p / $r, $r);
}

#
# Return min of values in arrayref.
#

sub min {
    my($a) = @_;
    die "No values to take min of" unless @$a;
    my $min = $a->[0];
    ($min > $_) && ($min = $_) for @$a;
    return $min;
}

#
# Return product of values in arrayref.
#
sub prod {
    my($a) = @_;
    my $n = 1;
    $n *= $_ for @$a;
    return $n;
}

#
# Return sum of values in arrayref.
#
sub sum {
    my($a) = @_;
    my $n = 0;
    $n += $_ for @$a;
    return $n;
}

#
# Return TRUE if the check c (factorizing to fm) should be skipped for n
# according to the cp option, ie if the largest factor of c not dividing
# n is greater than cp.
#
sub cp_skip {
    my($cp, $n, $fm) = @_;
    # assume the greatest factor
    my $i = $#$fm;
    # skip past those that divide n
    --$i while $i >= 0 && ($n % $fm->[$i][0]) == 0;
    return 1 if $i >= 0 && $fm->[$i][0] > $cp;
    return 0;
}
#
# Given n, d, returns true if d divides n to give an odd number.
#
sub divides_oddly {
    my($n, $d) = @_;
    my($q, $r) = $n->bdiv($d);
    return 0 if $r;
    return +($q & 1) ? 1 : 0;
}

#
# Given factorisation of n = [ [p_1, pow_1], ... ], return rad(n) = prod(p_i)
#
sub rad_factor {
    my($f) = @_;
    my $rad = MBI(1);
    $rad *= $_->[0] for @$f;
    return $rad;
}

#
# Given factorisation of n = [ [p_1, pow_1], ... ], return tau(n) = prod(pow_i + 1)
#
sub tau_factor {
    my($f) = @_;
    my $tau = 1;
    $tau *= $_->[1] + 1 for @$f;
    return $tau;
}

#
# Given n, d return the least divisor of n >= d.
# Assumed d <= n.
#
sub first_divisor {
    my($n, $d) = @_;
    ++$d while gcd($d, $n) < $d;
    return $d;
}

#
# Given [ [p_1, pow_1], ... ] return the n of which it is the factorisation.
#
sub unfactor_exp {
    my($f) = @_;
    my $n = 1;
    for (@$f) {
        $n *= $_->[0] ** $_->[1];
    }
    return $n;
}

#
# Given n, return an iterator that yields each factorisation of n into
# parts > 1, or undef.
#
sub iter_factor {
    my $n = shift;
    my $f = [ $n ];
    return sub {
        return undef unless @$f;
        my $r = [ @$f ];
        my $spare = MBI(1);
        ITERFAC: while (@$f) {
            my $last = pop @$f;
            my $prod = $spare * $last;
            for my $d ($spare + 1 .. int($prod / 2)) {
                my($q, $rem) = $prod->bdiv($d);
                next if $rem;
                push @$f, $q, $d;
                last ITERFAC;
            }
            $spare = $prod;
        }
        return @$r ? $r : undef;
    };
}

{
    my @seq_seen;
    #
    # rootseq(n, tau, f, g, constraint)
    # - search for arithmetic sequence n+kd, 0<=k<=f, with tau(n+kd)=tau(n)
    # - search with d in the range g=[min, max]
    # - check only those d that satisfy constraints in the Constraint object
    #
    sub rootseq {
        my($c) = @_;
        my $count = $c->tell_count;
        my($n, $f, $tau) = ($c->n, $c->f, $c->tau);
        my $k = $f - 1;
        my $tester = prepare_tester($c);
        $tester = test_all($tester) if $opt_ta;
        my $cur;
        $c->init();
        check_mult($c) unless $opt_f;
        printf <<OUT, $c->frequency(), $c->elapsed();
309 Prep finished, frequency %.2f (%.3fs)
OUT
        exit 0 if $opt_D;

        CUR: while ($cur = $c->next()) {
            report_reach($n, $f, $cur, $c), $count = $c->tell_count
                    unless --$count;
            for (0 .. $#$tester) {
                next if $tester->[$_]->($cur);
                report_seq($n, $f, $cur, $_) unless $seq_seen[$_]++;
                next CUR;
            }
            report_reach($n, $f, $cur, $c);
            return $cur;
        }
        report_reach($n, $f, $c->cur, $c);
        return undef;
    }

    sub report_reach {
        my($n, $f, $cur, $c) = @_;
        my $t = $c->elapsed();
        my($tests, $skipped, $kept) = ($c->tests(), $c->skipped(), $c->kept());

        printf <<OUT, $t, $n, $f, $cur, $kept, $skipped, $tests, join ' ', map $_ || 0, @seq_seen;
301 After %.2fs for (%s, %s) reach d=%s (keep %s, skip %s with %s tests) seen [%s]
OUT
    }

    sub test_all {
        my($tester) = @_;
        return [ sub {
            my($cur) = @_;
            my $pass = 1;
            for (0 .. $#$tester) {
                next if $tester->[$_]->($cur);
                ++$seq_seen[$_ + 1];
                $pass = 0;
            }
            return $pass;
        } ];
    }
}

#
# Returns an arrayref of subrefs, that (in some order) test whether each of
# the candidate targets n+kd has the required number of factors.
# Each subref accepts a single argument (d), and returns a boolean: TRUE
# means tau(n+kd) = tau(n).
#
# We try to arrange the order and strategy of the testing subrefs to optimize
# speed:
# - we can test primality much faster than we can factorize
# - we want to test first those least likely to return TRUE (all other things
#   being equal)
# - generally the most constrained are least likely to return true; that
#   probably means that given g=gcd(n,k) we should test those k that
#   maximize tau(g) first
# - additionally, we'd prefer not to multiply up with known factors, but
#   we must take care to elide only fixed powers (so we have a known tau)
# - if we had a fast issquare() check, that would also be a useful thing
#   to take advantage of
#
# eg for f(125), f(343) we can use prime checks
#
# TODO: the current "let's put what we know most about first" actually
# gives us a good ordering for information (via 301 lines), but is badly
# suboptimal for speed - those tested earliest seem in practice to be the
# ones least likely to be rejected.
# Consider testing all k without shortcircuit for the first <x> tests,
# and then picking an order that tests first those most likely to be
# rejected. (Outputting the accept rate at this point would also be
# interesting, since we can use it to start making probabilistic predictions
# about when we'll find a solution.)
#
# TODO: We can improve the prime special-case by not doing a full is_prime()
# check for each candidate in turn, but rather doing single rounds of
# maybe_prime() for each in turn looking for cheaper opportunities to reject
# before doing the more expensive full check on a realistic set of candidates.
# If additional rounds of maybe_prime can avoid repeating work, we could even
# split the work into more than two passes:
#   my @testers = (
#       map(sub { maybe_prime($_[0], $_) }, 1 .. $MAX),
#       sub { is_prime($_) },
#   );
#   for my $tester (@testers) {
#       for my $candidate (@candidates) {
#           last THIS_SET unless $tester->($candidate);
#       }
#   }
#   return \@candidates;   # found a solution
#
sub prepare_tester {
    my($c) = @_;
    my($n, $f, $tau, $min) = ($c->n, $c->f, $c->tau, $c->min);
    my $np = [ map $_->[0], factor_exp($n) ];
    my %t;

    my $all_prime = ($tau == 2) ? 1 : 0;
    my $short_prime = ($tau == 4 && @$np == 2) ? 1 : 0;

    # override any other ordering if we're doing 'test all'
    $opt_ts = [ 1 .. $f - 1 ] if $opt_ta;
    my $fixed = @$opt_ts ? 1 : 0;

    for my $k (1 .. $f - 1) {
        my($legend, $tester);
        my $g = gcd($k, $n);
        if ($all_prime) {
            $legend = $k;
            $tester = sub { is_prime($n + $_[0] * $k) };
        } elsif ($short_prime && $g > 1 && $min > $g ** 3) {
            my $gn = $n / $g;
            my $gk = $k / $g;
            $legend = "p$k";
            $tester = sub { is_prime($gn + $_[0] * $gk) };
        } else {
            $legend = $k;
            $tester = sub { $tau == tau($n + $_[0] * $k) };
        }
        $t{$k} = [ $legend, $tester ];
    }

    my %pref = map +($_ => gcd($n, $_)), 1 .. $f - 1;
    my @order = map {
        my $v = $_ + 0;
        die "Invalid test order '$_'" unless delete $pref{$v};
        $v
    } @$opt_ts;
    push @order, sort { $pref{$b} <=> $pref{$a} || $a <=> $b } keys %pref;
    printf "320 Testers: %s\n",
        ($all_prime && !$fixed) ? 'all prime, ascending order'
        : join ', ', map $_->[0], @t{@order};
    return [ map $_->[1], @t{@order} ];
}

sub report_seq {
    my($n, $f, $d, $first) = @_;

    my $good = 1;
    my $tau = tau($n);
    my @result;
    for (my $i = 0; ($i <= $f) || $good; ++$i) {
        my $v = $n + $d * $i;
        my $result = [ $i, tau($v), $v, pf($v) ];
        $good = 0 unless $result->[1] == $tau;
        push @result, $result;
    }

    my $flen = length($#result);
    my $vlen = length($result[-1][2]);
    for (0 .. $#result) {
        my $r = $result[$_];
        printf <<OUT, $flen, $r->[0], $r->[1], $vlen, $r->[2], $r->[3];
211 Sequence % *s: % 2s = tau(% *s = %s)
OUT
    }
    if (defined $first) {
        printf <<OUT, $c->elapsed, $n, $f, $first;
306 After %.2fs for (%s, %s) first fail for test %s
OUT
    }
}

sub check_limit {
    my($n, $f) = splice @_, 0, 2;
    my $max = 0;
    ($max < $_) && ($max = $_) for @_;
    return 1 if $f <= $max;
    printf <<OUT, $n, $max, $f;
401 Error: f(%s) <= %s, you asked for %s.
OUT
    return undef;
}

sub phash {
    my $max = shift;
    return MBI(1) if $max <= 1;
    my $mult = MBI(2);
    my $p = 1;
    while (1) {
        $p = next_prime($p);
        last if $p >= $max;
        $mult *= $p;
    }
    return $mult;
}

sub pf {
    my $n = shift;
    return join '.', map {
        $_->[1] == 1 ? $_->[0] : "$_->[0]^$_->[1]"
    } factor_exp($n);
}

sub tau {
    my $n = shift;
    my $k = 1;
    $k *= $_->[1] + 1 for factor_exp($n);
    return $k;
}

sub ston {
    my($s) = @_;
    $s =~ s{e(\d+)}{"0" x $1}ie;
    return MBI($s);
}

sub ntos {
    my($n) = @_;
    $n =~ s{(0+)$}{"e" . length($1)}e;
    return $n;
}
