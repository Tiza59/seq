#!/opt/maths/bin/perl -w
use strict;
BEGIN { $Math::Pari::initmem=1e8; $Math::Pari::initprimes=1e8 }
use Math::Pari qw/ PARI factorint isprime prime gcd Mod lift divrem /;

use lib './clib';
use Constraint;
use ModFunc qw/ mod_combine quadvec /;

my($opt_n, $opt_x, $opt_c, $opt_t, $opt_cp, $opt_cr)
		= (0, 0, 0, 100000, 0, 0);
while (@ARGV && $ARGV[0] =~ /^-/) {
	my $arg = shift @ARGV;
	last if $arg eq '--';
	Constraint->debug_more(), next if $arg eq '-d';
	($opt_n = $arg || shift(@ARGV)), next if $arg =~ s{^-n}{};
	($opt_x = $arg || shift(@ARGV)), next if $arg =~ s{^-x}{};
	($opt_cp = $arg || shift(@ARGV)), next if $arg =~ s{^-cp}{};
	($opt_cr = $arg || shift(@ARGV)), next if $arg =~ s{^-cr}{};
	($opt_c = $arg || shift(@ARGV)), next if $arg =~ s{^-c}{};
	($opt_t = $arg || shift(@ARGV)), next if $arg =~ s{^-t}{};
	die "Unknown option '$arg'\n";
}

$| = 1;
my($n, $f) = map PARI($_), @ARGV;
my $zone = PARI(1);
my $tn = tau($n);
my $c = Constraint->new(
	'n' => $n,
	'f' => $f,
	'tell_count' => $opt_t,
	't0' => scalar times(),
	'min' => $opt_n,
	'max' => $opt_x,
	'check' => $opt_c,
	'min_potency' => $opt_cr,
	'tau' => $tn,
);

$c = apply($c) or exit 0;
printf <<OUT, $c->elapsed(), 'rootseq', $n, $f, $opt_n, $opt_x, $opt_c;
300 Init %.2f: trying %s() for (%s, %s) in [%s, %s], checks up to mod %s
OUT

my $d = rootseq($c);
if ($d) {
	report_seq($n, $f, $d);
	printf <<OUT, $n, $f, $d, $c->elapsed();
200 f(%s, %s) = %s  (%.3fs)
OUT
} else {
	printf <<OUT, $n, $f, $opt_x, $c->elapsed();
500 f(%s, %s) > %s  (%.3fs)
OUT
}
exit 0;

sub apply {
	my $c = shift;
	my $tn = $c->tau;

	for my $m (2 .. $c->check) {
$c->debug && warn "apply $m\n";
		my $fm = factorint($m);
		next if $opt_cp && $fm->[0][$#{ $fm->[0] }] > $opt_cp;

		#
		# If n is prime, the only thing we can usefully do is avoid primes
		#
		if ($tn == 2) {
			series($c, 0, $m, $m) if @{ $fm->[0] } == 1 && $fm->[1][0] == 1;
			next;
		}

		#
		# If we know n+kd must not divide m (maybe only beyond some maximum
		# value for n+kd), use that to deny various values (mod m).
		#
		my $max = test_series($m, $tn);
		series($c, 0, $m, $max) if $max >= 0;

		#
		# n+kd == m (mod m rad(m)) is suppressible when tau(m) ~| tau(n)
		#
		# Alternatively, when tau(n) / tau(m) is odd, we can fix any other
		# factors to be quadratic residues.
		#
		test_m_rad_m($c, $m, $tn);
	}

	#
	# If we know n+kd fixes all but a square for some k, that's a hugely
	# powerful optimisation. Applicability depends on other constraints,
	# so we check for this last.
	#
	# TODO: Check if pending constraints would trigger this optimisation,
	# and schedule it if so.
	#
	my $fix_square = fix_square($c, $n, $tn);
	if ($fix_square) {
		my($k, $ty2) = @$fix_square;
		# we require d = y^2 - n/k, with tau(y^2) = ty2
		warn "311 Fixing square d = y^2 - n/$k, tau(y^2) = $ty2\n";
		$c = $c->fix_square($k, $ty2);
	}

	return $c;
}

#
# disallow n+kd=v (mod m) for n+kd > max
#
sub series {
	my($c, $v, $m, $max) = @_;
	$max ||= 0;
	($c->debug > 1) && warn "series ($v, $m, $max)\n";
	my $n = $c->n;
	for my $k (1 .. $c->f - 1) {
		my $g = gcd($k, $m);
		my($gv, $gvr) = @{ divrem($v - $n, $g) };
		next if $gvr != 0;	# No constraint: this modval can't happen
		my $m2 = $m / $g;
		my $v2 = lift(Mod($gv, $m2) / ($k / $g));
		$c->suppress($m2, $v2, int(($max - $n) / $k) + 1);
	}
	($c->debug > 1) && warn "series ($v, $m, $max): applied\n";
}

#
# To fix d to be related to a square, we need to find x such that:
# 1) f > x
# 2) x.rad(x) | n
# 3) gcd(x, d) = 1 by prior constraints
# 4) tau(n) = (2y + 1)tau(x) for some y
# Then we know n+xd = xy^2 for some y (and we know tau(y)).
#
# There are situations where we could fix a higher power, but we can't yet
# take advantage of that.
#
# FIXME: there are other situations where this optimization could apply:
# we can fix factors less directly related to f. Eg for n=198, k=12,
# the constraints fix d==3245(mod 4320); that means at f=10 we have
# n+fd = 2^3 . p^2. But it will be harder to find this in the general
# case: we may be mod-fixed mod p, but need to inspect the specific
# constraints mod p^2 (for example) to show that we can guarantee
# gcd(n+fd, p^2) = p; we'll also need to adjust the runtime calculations
# since we are not simply dividing by f.
#
sub fix_square {
	my($c, $n, $tn) = @_;
	my $f = $c->f();
	my $debug = $c->debug;
	for my $x (@{ $n->divisors }) {
		last if $x >= $f;	# divisors are returned in ascending order
		my $fx = factorint($x);
		my $rx = rad_factor($fx);
		$debug && warn("Would try fix_square($x), but 0(mod p|$rx) are not all disallowed.\n"),
		next if grep !$c->disallowed($_, 0), @{ $fx->[0] };
		my $xrx = $x * $rx;
		$debug && warn("Would try fix_square($x), but $xrx does not divide $n.\n"),
		next if gcd($xrx, $n) < $xrx;
		my $tx = tau_factor($fx);
		my($tdiv, $trem) = @{ divrem($tn, $tx) };
		$debug && warn("Would try fix_square($x), but tau($x) does not divide $tn.\n"),
		next if $trem;
		$debug && warn("Would try fix_square($x), but $tn/tau($x) is even.\n"),
		next if !($tdiv & 1);
		$debug && warn("Will fix_square($x).\n"),
		return [$x, $tdiv];
	}
	return undef;
}

#
# n+kd == xp^y (mod p^{y+1}) is suppressible when y+1 ~| tau(n).
#
# More generally:
#	tau(m) ~| tau(n)  and  n+kd == m (mod m rad(m)) => tau(n+kd) != tau(n)
#
# However, given m = \prod p_i^a_i, if a) tau(m) > tau(n), or better:
#	a)  \not \exists k: tau(km) = tau(n)
# or:
#	b)  \exists i: tau(m / p_i^a_i) ~| tau(n)
# we will already have suppressed a superset of what this gives us.
#   
# Additionally, when tau(m) | tau(n) with tau(n) / tau(m) odd, then if
# n + kd == um (mod m rad m), gcd(u, rad m) = 1 we can suppress
# um (mod m rad m) unless u is a quadratic residue mod each prime p
# dividing m, and um (mod q m rad m) unless u is a quadratic residue mod q.
#
# We can go further when instead of q we take q^s: there are more non-residues
# mod q^s (but it means recalculating what m and rad(m) mean). For any
# q > 2, it is only useful to take q^s : gcd(pmr, q^{s+1}) = q^s since
# for an odd prime a coprime non-residue mod q^{s+1} is always a non-residue
# mod q^s. For q=2 we need a special case to cope eg with 3(mod 4).
#
sub test_m_rad_m {
	my($c, $pmr, $tn) = @_;
	my $debug = $c->debug;
	$debug > 1 && print "m rad m: try $pmr\n";
	my($p, $m, $r) = discern_rad($pmr) or do {
		$debug > 2 && print "m rad m: too many spares\n";
		return;
	};
	my($mp, $mpp) = @{ factorint($m) };
	my $tm = tau_factor([ $mp, $mpp ]);

	my $rp = $r * $p;
	my($qm, $qr, $qrp) = ($m, $r, $rp);
	my $quad_series = sub {
		my($mod) = @_;
		my $vec = quadvec($mod);
		for my $u (1 .. $qrp - 1) {
			next if gcd($u, $qr) > 1;
			next if vec($vec, $u % $mod, 1);
			$debug > 2 && print "m rad m: series $u * $qm, $pmr\n";
			series($c, $u * $qm, $pmr, 0);
		}
	};

	if ($p > 1) {
		$quad_series->($p) if divides_oddly($tn, $tm);
		# all remaining tests require p==1
		return;
	}

	$quad_series->($r) if divides_oddly($tn, $tm);

	if ($mp->[0] == 2) {
		# p=2 uniquely introduce new non-residues at higher powers; eg
		# 3 is a non-residue (mod 4).
		my $pp2 = $mpp->[0];
		my $tm2 = $m / ($pp2 + 1) * $pp2;
		if (divides_oddly($tn, $tm * $pp2 / ($pp2 + 1))) {
			my $p = $mp->[0];
			$qm = $m / $p;
			$qrp = $rp * $p;
			my $pp = $p ** ($pp2 + 1);
			# we need to allow 2 mod 8, but not 4 mod 8
			$qr = $r;	# not $qr = $r / $p
			$quad_series->($p ** ($pp2 + 1));
		}
	}

	{
		for my $j (0 .. $#$mp) {
			my $pp = $mpp->[$j] + 1;
			if (divides_oddly($tn, $tm / $pp)) {
				my $p = $mp->[$j];
				$qm = $m / $p;
				$qr = $r / $p;
				$qrp = $rp * $p;
				$quad_series->($p ** $pp);
			}
		}
	}

	# case a (coarse version)
	return if $tm > $tn;

	# main requirement
	return if ($tn % $tm) == 0;

	for my $i (0 .. $#$mp) {
		my $tm_i = $tm / ($mpp->[$i] + 1);
		# case b
		return if ($tn % $tm_i) != 0;
	}

	for my $u (1 .. $r - 1) {
		next if gcd($u, $r) > 1;
		$c->debug && print "m rad m: suppress $m * $u mod $pmr\n";
		series($c, $m * $u, $pmr, 0);
	}
}

sub test_series {
	my($m, $tn) = @_;
	my $fm = factorint($m);
	my $tm = tau_factor($fm);
	my $p = $fm->[0];
	my $max = -1;

	#
	# If tau(m) >= tau(n) we can limit the options (mod m).
	#
	if ($tm > $tn) {
		return 0;
	} elsif ($tm == $tn) {
		$max = $m;
	}

	#
	# Let m=\prod{p_i^a_i}, m_2=\prod{p_i^b_i} where b_i is least k >= a_i
	# such that b_i + 1 divides tau(n). Then if tau(m_2) >= tau(n) we can
	# limit the options (mod m) for n+kd > m_2.
	# 
	my $fm2 = [ $p, [ map first_divisor($tn, $_ + 1) - 1, @{ $fm->[1] } ] ];
	my $m2 = unfactorint($fm2);
	my $tm2 = tau_factor($fm2);
	if ($m2 > $m) {
		if ($tm2 > $tn) {
			return 0;
		} elsif ($tm2 == $tn) {
			$max = $m2 unless $max >= 0 && $max < $m2;
		}
	}

	#
	# Let m_3=\prod{p_i^c_i}, c^i>=b_i. Valid solutions require selecting
	# k_j, m_{3j} such that tau(k_j m_{3j})=tau(n). If k_j=1 for all j,
	# we can limit the options (mod m) for n+kd > max(m_{3j}).
	#
	if (gcd($tm2, $tn) < $tm2) {
		my $maxm3 = 0;
		my $good = 1;
		my $iter = iter_factor($tn);
		while (my $tn_factors = $iter->()) {
			my $fm3 = [ $p, [ map $_ - 1, @$tn_factors ] ];
			next if @{ $fm3->[1] } < @{ $fm2->[1] };
			next if grep $fm3->[1][$_] < $fm2->[1][$_], 0 .. $#$p;
			$good = 0, last if @$tn_factors > @$p;
			my $m3 = unfactorint($fm3);
			$maxm3 = $m3 if $maxm3 < $m3;
		}
		$max = $maxm3 if $good && !($max >= 0 && $max < $maxm3);
	}
	return $max;
}

#
# Given integer s, returns (p, m, rad(m)) such that s = p m rad(m), and
# p is prime or 1. If no such split is possible (because more than one
# prime divides s with a multiplicity of one), returns nothing.
#
sub discern_rad {
	my($s) = @_;
	my($sp, $spp) = @{ factorint($s) };
	my $p = $zone;
	my $r = $zone;
	for my $i (0 .. $#$sp) {
		if ($spp->[$i] == 1) {
			if ($p > 1) {
				return;
			} else {
				# assigning out of the factorint arrayref seems to cause
				# refcount problems
				$p *= $sp->[$i];
			}
		} else {
			$r *= $sp->[$i];
		}
	}
	return +($p, $s / $p / $r, $r);
}

#
# Return min of values in arrayref.
#

sub min {
	my($a) = @_;
	die "No values to take min of" unless @$a;
	my $min = $a->[0];
	($min > $_) && ($min = $_) for @$a;
	return $min;
}

#
# Return product of values in arrayref.
#
sub prod {
	my($a) = @_;
	my $n = 1;
	$n *= $_ for @$a;
	return $n;
}

#
# Return sum of values in arrayref.
#
sub sum {
	my($a) = @_;
	my $n = 0;
	$n += $_ for @$a;
	return $n;
}

#
# Given n, d, returns true if d divides n to give an odd number.
#
sub divides_oddly {
	my($n, $d) = @_;
	my($q, $r) = @{ divrem($n, $d) };
	return 0 if $r;
	return +($q & 1) ? 1 : 0;
}

#
# Given factorisation of n = [ p[], pow[] ], return rad(n) = prod(p[i])
#
sub rad_factor {
	my($f) = @_;
	my $rad = PARI(1);
	$rad *= $_ for @{ $f->[0] };
	return $rad;
}

#
# Given factorisation of n = [ p[], pow[] ], return tau(n) = prod(pow[i] + 1)
#
sub tau_factor {
	my($f) = @_;
	my $tau = 1;
	$tau *= $_ + 1 for @{ $f->[1] };
	return $tau;
}

#
# Given n, d return the least divisor of n >= d.
# Assumed d <= n.
#
sub first_divisor {
	my($n, $d) = @_;
	++$d while gcd($d, $n) < $d;
	return $d;
}

#
# Given [ p[], pow[] ] return the n of which it is the factorisation.
#
sub unfactorint {
	my($f) = @_;
	my $n = 1;
	for (0 .. $#{ $f->[0] }) {
		$n *= $f->[0][$_] ** $f->[1][$_];
	}
	return $n;
}

#
# Given n, return an iterator that yields each factorisation of n into
# parts > 1, or undef.
#
sub iter_factor {
	my $n = shift;
	my $f = [ $n ];
	return sub {
		return undef unless @$f;
		my $r = [ @$f ];
		my $spare = 1;
		ITERFAC: while (@$f) {
			my $last = pop @$f;
			my $prod = $spare * $last;
			for my $d ($spare + 1 .. int($prod / 2)) {
				my($q, $rem) = @{ divrem($prod, $d) };
				next if $rem;
				push @$f, $q, $d;
				last ITERFAC;
			}
			$spare = $prod;
		}
		return @$r ? $r : undef;
	};
}

{
	my @seq_seen;
	#
	# rootseq(n, tau, f, g, constraint)
	# - search for arithmetic sequence n+kd, 0<=k<=f, with tau(n+kd)=tau(n)
	# - search with d in the range g=[min, max]
	# - check only those d that satisfy constraints in the Constraint object
	#
	sub rootseq {
		my($c) = @_;
		my $count = $c->tell_count;
		my($n, $f, $tau) = ($c->n, $c->f, $c->tau);
		my $k = $f - 1;
		my $tester = prepare_tester($c);
		my $cur;
		$c->init();
		CUR: while ($cur = $c->next()) {
			report_reach($n, $f, $cur, $c), $count = $c->tell_count unless --$count;
			for (0 .. $#$tester) {
				$tester->[$_]->($cur)
					#|| (report_seq($n, $f, $cur), next CUR)
					#|| next CUR
					|| ($seq_seen[$_]++ || report_seq($n, $f, $cur), next CUR)
					#|| (++$seq_seen[$_-1], next CUR)
			}
			report_reach($n, $f, $cur, $c);
			return $cur;
		}
		report_reach($n, $f, $c->cur, $c);
		return undef;
	}

	sub report_reach {
		my($n, $f, $cur, $c) = @_;
		my $t = $c->elapsed();
		my($tests, $skipped, $kept) = ($c->tests(), $c->skipped(), $c->kept());

		printf <<OUT, $t, $n, $f, $cur, $kept, $skipped, $tests, join ' ', map $_ || 0, @seq_seen;
301 After %.2fs for (%s, %s) reach d=%s (keep %s, skip %s with %s tests) seen [%s]
OUT
	}
}

#
# Returns an arrayref of subrefs, that (in some order) test whether each of
# the candidate targets n+kd has the required number of factors.
# Each subref accepts a single argument (d), and returns a boolean: TRUE
# means tau(n+kd) = tau(n).
#
# We try to arrange the order and strategy of the testing subrefs to optimize
# speed:
# - we can test primality much faster than we can factorize
# - we want to test first those least likely to return TRUE (all other things
#   being equal)
# - generally the most constrained are least likely to return true; that
#   probably means that given g=gcd(n,k) we should test those k that
#   maximize tau(g) first
# - additionally, we'd prefer not to multiply up with known factors, but
#   we must take care to elide only fixed powers (so we have a known tau)
# - if we had a fast issquare() check, that would also be a useful thing
#   to take advantage of
#
# eg for f(125), f(343) we can use prime checks
#
# TODO: the current "let's put what we know most about first" actually
# gives us a good ordering for information (via 301 lines), but is badly
# suboptimal for speed - those tested earliest seem in practice to be the
# ones least likely to be rejected.
# Consider testing all k without shortcircuit for the first <x> tests,
# and then picking an order that tests first those most likely to be
# rejected. (Outputting the accept rate at this point would also be
# interesting, since we can use it to start making probabilistic predictions
# about when we'll find a solution.)
#
sub prepare_tester {
	my($c) = @_;
	my($n, $f, $tau, $min) = ($c->n, $c->f, $c->tau, $c->min);
	if ($tau == 2) {
		# all the targets must be prime; it may still be useful to test them
		# in reverse order, but I suspect the faster checking on smaller
		# numbers more than makes up for the reduced chance they are nonprime
		print "320 Testers: all prime, ascending order\n";
		return [ map {
			my $k = $_;
			sub { isprime($n + $_[0] * $k) }
		} 1 .. $f - 1 ];
	}
	my($np, $na) = @{ factorint($n) };
	my(%seen, @tester);
	if (
		$tau == 4
		&& @$np == 2
	) {
		for my $p (@$np) {
			next if $min <= $p ** 3;
			my $q = $n / $p;
			for my $xi (1 .. int(($f - 1) / $p)) {
				my $ki = $p * $xi;
				next if $seen{$ki}++;
				# pq + xpd = p(q+xd)
				push @tester, [ "p$ki", sub { isprime($q + $xi * $_[0]) } ];
			}
		}
	}
	# For the rest, let's put what we know most about first
	my @known = map {
		my $k = $_;
		my $g = gcd($k, $n);
		my $tg = tau($g);
		[ $k, $g, $tg ];
	} grep !$seen{$_}, 1 .. $f - 1;
	push @tester, map {
		my $k = $_->[0];
		[ $k, sub { $tau == tau($n + $_[0] * $k) } ]
	} sort { $b->[2] <=> $a->[2] || $b->[1] <=> $a->[1] } @known;
	printf "320 Testers: [%s]\n", join ', ', map $_->[0], @tester;
	return [ map $_->[1], @tester ];
}

sub report_seq {
	my($n, $f, $d) = @_;
	my $flen = length($f);
	my $vlen = length($n + $f * $d);
	for (0 .. $f) {
		my $v = $n + $d * $_;
		printf <<OUT, $flen, $_, tau($v), $vlen, $v, pf($v);
211 Sequence % *s: % 2s = tau(% *s = %s)
OUT
	}
}

sub check_limit {
	my($n, $f) = splice @_, 0, 2;
	my $max = 0;
	($max < $_) && ($max = $_) for @_;
	return 1 if $f <= $max;
	printf <<OUT, $n, $max, $f;
401 Error: f(%s) <= %s, you asked for %s.
OUT
	return undef;
}

sub phash {
	my $max = shift;
	return PARI(1) if $max <= 1;
	my $mult = PARI(2);
	my $p = 1;
	while (1) {
		$p = nextprime($p);
		last if $p >= $max;
		$mult *= $p;
	}
	return $mult;
}

sub pf {
	my $n = shift;
	my($prime, $power);
	eval {
		($prime, $power) = @{ factorint($n) };
	};
	use Data::Dumper;
	print(Dumper($n), "pf($n) failed: $@"), exit(0) if $@;
	my $s = join '.', map {
		$power->[$_] == 1 ? $prime->[$_] : "$prime->[$_]^$power->[$_]"
	} 0 .. $#$prime;
	($prime, $power) = (undef, undef);
	return $s;
}

#
# Return ordered representation of prime factors and canonical signature for n.
# Signature is a string consisting of the powers of the prime factors in
# descending order, separated by dots. The factors are similarly ordered.
#
sub facsig {
	my $n = shift;
	# my($p, $pp) = @{ factorint($n) };
	#
	# HACK: try to dodge coredumps
	#
	my($p, $pp);
	{
		my($f) = factorint($n);
		$p = [ map PARI("$_"), @{ $f->[0] } ];
		$pp = [ map PARI("$_"), @{ $f->[1] } ];
		$f = undef;
	}
	my @order = sort {
		$pp->[$b] <=> $pp->[$a]
	} 0 .. $#$pp;
	my $fac = [ [ @$p[@order] ], [ @$pp[@order] ] ];
	my $sig = join '.', @{ $fac->[1] };
	return ($fac, $sig);
}

sub nextprime {
	my $p = shift;
	DIV: while (1) {
		$p += 2;
		my $d = 3;
		while (1) {
			last if $d * $d > $p;
			next DIV unless $p % $d;
			$d += 2;
		}
		return $p;
	}
}

sub tau {
	my $n = shift;
	my $k = 1;
	my $power;
	eval {
		(undef, $power) = @{ factorint($n) };
		$k *= $_ + 1 for @$power;
	};
	use Carp; Carp::confess("tau($n) failed: $@") if $@;
	return $k;
}
