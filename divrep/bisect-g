#!/opt/maths/bin/perl
use strict;
use warnings;
use lib 'lib';
use List::Util qw{ sum };
use Type;

my $typename = 't';
while (@ARGV && $ARGV[0] =~ /^-/) {
    my $arg = shift @ARGV;
    last if $arg eq '--';
    $typename = $1, next if $arg =~ /^-y(.*)/;
    die "Unknown option '$arg'";
}
@ARGV == 5 or die "500 Usage: $0 n ming maxg d optc";

=head1 bisect-g: find upper bound for g(n)

Given inputs I<n>, I<ming>, I<maxg>, I<d>, I<optc>, attempts to refine
the upper bound I<maxg> for C<g(n)> by bisection.

I<ming> should be the best known lower bound for C<g(n)>; I<maxg> should
be the current best known upper bound for C<g(n)>; I<d> should be the
greatest difference checked to; and I<optc> is the requested number of
values to check.

The program will invoke C<gtauseq> to perform a binary chop, using options
C<< -c I<optc> -cp 20 -D >>, and report the new best upper bound.

=cut

my($n, $ming, $maxg, $d, $optc) = @ARGV;
my $type = Type->new($typename);

my($good, $bad) = ($ming, $maxg + 1);
while ($good + 1 < $bad) {
    my $mid = ($good + $bad) >> 1;
    if (bad($type, $mid)) {
        $bad = $mid;
    } else {
        $good = $mid;
    }
}
my $time = sum(times());
printf "200 g(%s) <= %s (%.2fs)\n",
        $n, $good, $time;
exit 0;

sub bad {
    my($type, $k) = @_;
    my $log = sprintf "%s/bg%s.%s-%s", $type->logpath, $n, $k, $$;
    my @args = (
        '-n', $d, '-x', $d, '-c', $optc, '-cp', 20, '-D',
        # force to avoid premature exit when dependent
        '-f',
        $n, $k,
    );
    my $lines = $type->invoked('gtauseq', "bgt($n, $k)", \@args, $log);
    # optionally parse '302' and/or '303' lines to refine -cp value
    if ($lines->{402}) {
        # 402 Error: all values (mod 2) disallowed (4.680s)
        return 1;
    }
    if ($lines->{403}) {
        # 403 Error: f(243) > 4 known impossible by exception (4.680s)
        return 1;
    }
    if ($lines->{404}) {
        # 404 Error: n + ${k}d must be divisible by n
        return 1;
    }
    if ($lines->{502}) {
        # Error: fixed 18 not available in tau 48
        return 1;
    }
    if ($lines->{309}) {
        # Prep finished, frequency 36.91 (184.980s)
        return 0;
    }
    # Not an expected result.
    die "501 Error parsing logs from '$log'\n";
}
