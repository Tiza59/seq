#!/opt/maths/bin/perl -w
use strict;
use List::MoreUtils qw{ first_index last_index none };

=head1 A026416

Define a(n) as: a(0) = 1, a(1) = 2, a(n > 1) is the least integer that cannot
be represented as a product of 2 distinct prior terms.

Then it is clear that all primes are in the sequence, and by symmetry that
prime signature is sufficient to determine membership of the sequence.

So determine the prime signatures in the sequence.

Note that this is a simpler form of A026477, which allows the product of
3 distinct prior terms.

=cut

my $limit = shift(@ARGV) || undef;

my(@seen_a, %seen_r);
for (my $sum = 1; !$limit || $sum <= $limit; ++$sum) {
    my $v = [ $sum ];
    while (1) {
        record_good($v, $sum) unless reachable($v, $sum);
        last unless $v = nextv($v);
    }
}

#
# Report and record a signature that has been determined to be in the sequence.
#
sub record_good {
    my($v, $sum) = @_;
    print "[ ", join(', ', @$v), " ]\n";
    push @{ $seen_a[$sum] }, [ @$v ];
    $seen_r{canonical($v)} = 1;
}

#
# Given an arrayref representing a prime signature, modify it to represent
# the next possible one and return it; else return undef.
#
# We want to replace [a, b, ... m, n, 1, 1, ... 1] with a "next" value like
# [a, b, ... m, n-1, n-1, ... n-1, r?] having the same sum.
#
sub nextv {
    my $v = shift;

    # find the last non-1
    my $i = last_index { $_ > 1 } @$v;

    # if there wasn't one, the last set was [1, 1, ... 1] and now we're done
    return undef if $i < 0;

    # replace (n, 1, 1, 1, ...) with (n - 1, n - 1, n - 1, .... remainder)
    my $max = $v->[$i] - 1;
    my $sum = $max + @$v - $i;
    my $lenmax = int($sum / $max);
    my $spare = $sum - $max * $lenmax;
    splice @$v, $i, @$v - $i, (($max) x $lenmax, $spare ? ($spare) : ());
    return $v;
}

#
# Return TRUE if the given signature can be reached by composing two distinct
# signatures already found to be in the sequence, else FALSE.
#
# We do this by trying each signature previously found that has a sum at
# least half as big.
#
sub reachable {
    my($v, $sum) = @_;
    for my $suma (1 .. int($sum / 2)) {
        my $sumb = $sum - $suma;
        for my $vb (@{ $seen_a[$sumb] }) {
            return 1 if reachable_via($v, $vb);
        }
    }
    return 0;
}

#
# Given a target signature v and a "via" signature vb, search for a way
# of assigning elements of vb to those of v such that the product v - vb
# represents a new prime signature already determined to be in the sequence.
# Returns TRUE if one was found, else FALSE.
#
# This additionally checks for and disqualifies a "non-distinct" va,
# such that va = vb and v = [ 2vb_i ] for all i. Thus, for example, [ 2 ]
# is not reachable via [ 1 ] but [ 1, 1 ] _is_ reachable via [ 1 ].
#
sub reachable_via {
    my($v, $vb) = @_;

    #
    # if there are too many elements to assign, skip it
    #
    return 0 if @$vb > @$v;

    #
    # if there's no way to subtract those elements, skip it - since both
    # arrays are ordered largest-first, we can just match them up
    #
    return 0 if 0 <= first_index { $vb->[$_] > $v->[$_] } (0 .. $#$vb);

    #
    # recursively find ways to assign elements of vb to elements of v,
    # then check if that leaves us a complement that's already in the sequence
    #
    my($reachable_r, %used, @assign);
    my $rb = canonical($vb);

    $reachable_r = sub {
        my($index) = @_;
        if ($index == @$vb) {
            # all elements are assigned, check if the complement is valid
            my @va = @$v;
            $va[$assign[$_]] -= $vb->[$_] for 0 .. $#$vb;

            # the entries are required to be distinct, which we can only
            # verify before canonicalization
            return 0 if @va == @$vb && !grep { $va[$_] != $vb->[$_] } 0 .. $#va;

            # if distinct, this is reachable if we've seen the complement
            return $seen_r{canonical(\@va)};
        }
        # find each possible way to assign the next element, and recurse
        my $value = $vb->[$index];
        my $prev = undef;
        for my $j (0 .. $#$v) {
            # must be subtractible
            last if $v->[$j] < $value;
            # must not already be assigned
            next if $used{$j};
            # skip if this assignment only tests a value already tested
            next if $prev && $v->[$j] == $prev;

            # it's a good assignment, let's try it
            local $used{$j} = 1;
            $assign[$index] = $j;
            $prev = $v->[$j];
            
            return 1 if $reachable_r->($index + 1);
        }
        return 0;
    };
    return $reachable_r->(0);
}

#
# Return a canonicalized string representing the given signature.
#
# Removes zeros, sorts descending, then packs to string.
#
sub canonical {
    my($v) = @_;
    return join '', map chr($_), sort { $b <=> $a } grep $_, @$v;
}
