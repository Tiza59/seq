#!/opt/maths/bin/perl
use strict;
use warnings;

my $uniq = 0;
my $indexed = 0;
while (@ARGV && $ARGV[0] =~ /^-/) {
    my $arg = shift @ARGV;
    last if $arg eq '--';
    $uniq = 1, next if $arg eq '-u';
    $indexed = 1, next if $arg eq '-i';
    die "unknown option '$arg'";
}

my $str = join '', ('0' .. '9', 'A' .. 'Z', 'a' .. 'z');
my @size;
my @seen;
while (<>) {
    /^\(/ or next;
    chomp;
    m{
        ^ \( (\d+) \) \s p\d+ \s
        (\d+) x (\d+) \s (\d+) : \s
    }x or die "Parse head: '$_'\n";
    my($i, $xspan, $yspan, $squares) = ($1, $2, $3, $4);
    my @point = map [ map $_ >> 1, split /:/ ], split ' ', substr($_, $+[0]);

    # if all x,y pairs have same parity, we can rot-45 to simplify
    my $need = 1;
    my $base = ($point[0][0] ^ $point[0][1]) & 1;
    for (@point) {
        next if (($_->[0] ^ $_->[1]) & 1) == $base;
        $need = 0;
        last;
    }
    if ($need) {
        my($minx, $maxx) = ($xspan + $yspan, 0);
        my($miny, $maxy) = ($yspan, -$xspan - $yspan);
        for (@point) {
            my($x, $y) = @$_;
            my($x2, $y2) = (($x + $y) / 2, ($y - $x) / 2);
            @$_ = ($x2, $y2);
            $minx = $x2 if $minx > $x2;
            $maxx = $x2 if $maxx < $x2;
            $miny = $y2 if $miny > $y2;
            $maxy = $y2 if $maxy < $y2;
        }
        $_->[0] -= $minx, $_->[1] -= $miny for @point;
        $xspan = $maxx - $minx + 1;
        $yspan = $maxy - $miny + 1;
    }

    ++$size[0 + @point]{$squares}
        if check($i, [ $xspan - 1, $yspan - 1 ], \@point, $squares);
}
printf "Sizes:\n";
for (0 .. $#size) {
    my $ss = $size[$_] or next;
    printf "%s: %s\n", $_, join ', ', map "$_=$ss->{$_}", sort { $a <=> $b } keys %$ss;
}
exit 0;

sub _str {
    my($p) = @_;
    join '', map chr($_), map @$_, sort {
        $a->[0] <=> $b->[0] || $a->[1] <=> $b->[1]
    } @$p;
}

sub check {
    my($i, $span, $p, $squares) = @_;
    my $s = _str($p);
    my($mx, $my) = @$span;
    my($x, $y);
    for my $sub (
        # xY, Xy, XY
        sub { [ $x, $my - $y ] },
        sub { [ $mx - $x, $y ] },
        sub { [ $mx - $x, $my - $y ] },

        # yx, yX, Yx, YX
        sub { [ $y, $x ] },
        sub { [ $y, $mx - $x ] },
        sub { [ $my - $y, $x ] },
        sub { [ $my - $y, $mx - $x ] },
    ) {
        my $t = _str([ map { ($x, $y) = @$_; $sub->() } @$p ]);
        $s = $t if $s gt $t;
    }
    if ($seen[0 + @$p]{$s}) {
        print "$seen[0 + @$p]{$s} == $i\n" unless $uniq;
        return 0;
    } else {
        $seen[0 + @$p]{$s} = $i;
        pretty($i, $span, $p, $squares) if $uniq;
        return 1;
    }
}

sub pretty {
    my($i, $span, $p, $squares) = @_;
    my($mx, $my) = map $_ + 1, @$span;
    my @q = map '.' x $mx, 0 .. $my - 1;
    if ($indexed) {
        $str .= $str while length($str) < @$p;
    }
    for (0 .. $#$p) {
        my($px, $py) = @{ $p->[$_] };
        substr($q[$py], $px, 1) = $indexed ? substr($str, $_, 1) : 'x';
    }
    $q[0] .= " (${mx}x${my} $squares, row $i)";
    print "$_\n" for @q;
    print "\n";
}
